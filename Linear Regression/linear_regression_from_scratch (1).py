# -*- coding: utf-8 -*-
"""Linear Regression From Scratch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pj7-3a_zmdTd5xZw5l6m5wFGKFcWPqEO
"""

#importing numpy library
import numpy as np

class Linear_Regression():

  def __init__(self,learning_rate,no_of_iterations):

    self.learning_rate = learning_rate
    self.no_of_iterations = no_of_iterations

  def fit(self,X,Y):
    self.m,self.n = X.shape

    self.w = np.zeros(self.n)
    self.b = 0
    self.X = X
    self.Y = Y

    for i in range(self.no_of_iterations):
      self.update_weights()

  def update_weights(self):
    Y_prediction = self.predict(self.X)

    #calculate the gradient
    dw = - (2 * (self.X.T).dot(self.Y - Y_prediction)) / self.m
    db = - 2 * np.sum(self.Y - Y_prediction)/self.m

    #updating the weight
    self.w = self.w - self.learning_rate * dw
    self.b = self.b - self.learning_rate * db

  def predict(self,X):
    return X.dot(self.w) + self.b

"""Linear Regression model for **prediction**"""

#importing the dependence
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

# Data pre processing
salary_data = pd.read_csv('/content/salary_data.csv')
salary_data.head()

salary_data.shape

salary_data.info()

salary_data.describe()

salary_data.isnull().sum()

X = salary_data.iloc[:,:-1].values
Y = salary_data.iloc[:,-1].values

print(X)

print(Y)

#Spliting the datset into training & test data
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)

#Training the linear Regression
model = Linear_Regression(learning_rate = 0.02,no_of_iterations=1000)

model.fit(X_train,Y_train)

print('Weight=',model.w[0])
print('Bias=',model.b)

#y = 9570(X) - 24384

#salary =  9570(experience) - 24384

test_data_prediction = model.predict(X_test)
print(test_data_prediction)

#vizualaizing the prediction values
plt.scatter(X_test,Y_test)
plt.plot(X_test,test_data_prediction,color='red')
plt.xlabel('Experience')
plt.ylabel('Salary')
plt.title('Salary Vs Experience')
plt.show()